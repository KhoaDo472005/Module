module.exports.config = {
  name: "domin", // minesweeper
  version: "1.0.0",
  hasPermssion: 0,
  credits: "Khoa x Nam",
  description: "D√≤ m√¨n",
  commandCategory: "Game",
  usages: "",
  cooldowns: 0
};

const axios = require("axios");
const fs = require("fs-extra");
const dirpath = __dirname + `/domin/`;
const { loadImage, createCanvas } = require("canvas");
var texthelp = "H∆∞·ªõng d·∫´n:\n" +
"1. B·∫£ng ch∆°i ƒë∆∞·ª£c chia th√†nh 70 √¥ nh·ªè, c√°c √¥ kh√¥ng g·∫ßn m√¨n s·∫Ω ƒë∆∞·ª£c ƒë√†o s·∫µn.\n"+
"2. N·∫øu ƒë√†o tr√∫ng √¥ c√≥ m√¨n, tr√≤ ch∆°i k·∫øt th√∫c v√† ng∆∞·ªùi ch∆°i thua. N·∫øu ƒë√†o √¥ kh√¥ng c√≥ m√¨n, √¥ ƒë√≥ s·∫Ω hi·ªÉn th·ªã s·ªë l∆∞·ª£ng √¥ c√≥ m√¨n xung quanh n√≥.\n" +
"3. D·ª±a v√†o c√°c con s·ªë n√†y, ng∆∞·ªùi ch∆°i ph·∫£i suy lu·∫≠n v·ªã tr√≠ c·ªßa c√°c √¥ c√≥ m√¨n v√† ƒë√°nh d·∫•u ch√∫ng.\n" +
"4. Ng∆∞·ªùi ch∆°i s·∫Ω chi·∫øn th·∫Øng khi ƒë√†o h·∫øt c√°c √¥ kh√¥ng c√≥ m√¨n ho·∫∑c ƒë√°nh d·∫•u ƒë√∫ng c√°c √¥ c√≥ m√¨n.\n" +
"5. T∆∞∆°ng t√°c v·ªõi tr√≤ ch∆°i b·∫±ng c√∫ ph√°p: <h√†nh ƒë·ªông> <t·ªça ƒë·ªô>\n" +
"Vd: 1 e5 f3 (ƒë√†o 2 √¥ c√≥ t·ªça ƒë·ªô E5, F3 l√™n)."

async function draw(map,id) {
  const canvas = createCanvas(1200, 1000);
  const ctx = canvas.getContext('2d');
  if (fs.existsSync(dirpath + "avt" + id + ".png")) await loadAvt(id);
  var avatar = await loadImage(dirpath + "avt" + id + ".png");
  ctx.drawImage(avatar, 520, 10, 160, 160);
  var background = await loadImage("https://raw.githubusercontent.com/KhoaDo472005/minesweeper/main/board.png");
  ctx.drawImage(background, 0, 0, 1200, 1000);
  var texture1 = await loadImage("https://raw.githubusercontent.com/KhoaDo472005/minesweeper/main/texture1.png");
  var texture2 = await loadImage("https://raw.githubusercontent.com/KhoaDo472005/minesweeper/main/texture2.png");
  var co = await loadImage("https://raw.githubusercontent.com/KhoaDo472005/minesweeper/main/co.png");
  for (let i = 0; i < 10; i++) {
    for (let j = 0; j < 7; j++) {
      const o = map[i][j];
      if (o.opened) {
        ctx.drawImage(texture2, 100+100*i, 800-100*j, 100, 100);
        if (o.isMine) {
          var mine = await loadImage("https://raw.githubusercontent.com/KhoaDo472005/minesweeper/main/bomb.png");
          ctx.drawImage(mine, 100+100*i, 800-100*j, 100, 100);
        } else {
          var number = await loadImage(`https://raw.githubusercontent.com/KhoaDo472005/minesweeper/main/no${o.adjacentMines}.png`);
          ctx.drawImage(number, 100+100*i, 800-100*j, 100, 100);
        }
	  } else {
        ctx.drawImage(texture1, 100+100*i, 800-100*j, 100, 100);
        if (o.markked) ctx.drawImage(co, 100+100*i, 800-100*j, 100, 100);
      }
    }
  }
  var path = dirpath + id + ".png";
  fs.writeFileSync(path, canvas.toBuffer("image/png"));
  return path;
}

function delData(id) {
  if (fs.existsSync(dirpath + id + ".json")) fs.unlinkSync(dirpath + id + ".json");
  if (fs.existsSync(dirpath + id + ".png")) fs.unlinkSync(dirpath + id + ".png");
  if (fs.existsSync(dirpath + "avt" + id + ".png")) fs.unlinkSync(dirpath + "avt" + id + ".png");
  return;
}

async function loadAvt(id) {
  var image = (await axios.get(`https://nams.live/avatar_ufb/${id}/512_512.jpg`, { responseType: "arraybuffer" })).data;
  fs.writeFileSync(dirpath + "avt" + id + ".png", Buffer.from(image, "utf-8"));
}

async function createMap(numberOfMines) {
  const map = [];
  for (let i = 0; i < 10; i++) {
    const row = [];
    for (let j = 0; j < 7; j++) {
      row.push({
        opened: false,
        isMine: false,
        markked: false,
        adjacentMines: 0
     });
    }
    map.push(row);
  }
  map[0][0].complete = 0;
  map[0][0].flag = 0;
  map[0][0].mode = numberOfMines;
  let minesCount = 0;
  while (minesCount < numberOfMines) {
    const x = Math.floor(Math.random() * 10);
    const y = Math.floor(Math.random() * 7);
    if (!map[x][y].isMine) {
      map[x][y].isMine = true;
      minesCount++;
    }
  }
  const directions = [
    [0, 1],
    [0, -1],
    [1, 0],
    [-1, 0],
    [1, 1],
    [1, -1],
    [-1, 1],
    [-1, -1]
  ];
  for (let i = 0; i < 10; i++) {
    for (let j = 0; j < 7; j++) {
      if (!map[i][j].isMine) {
        let count = 0;
        for (let k = 0; k < directions.length; k++) {
          const [dx, dy] = directions[k];
          const newX = i + dx;
          const newY = j + dy;
          if (newX >= 0 && newX < 10 && newY >= 0 && newY < 7 && map[newX][newY].isMine) count++; 
        }
        map[i][j].adjacentMines = count;
      }
    }
  }
  for (let i = 0; i < 10; i++) {
    for (let j = 0; j < 7; j++) {
      if (map[i][j].adjacentMines == 0 && !map[i][j].isMine) {map[i][j].opened = true ; map[0][0].complete += 1}
    }
  }
  return map;
}

module.exports.onLoad = () => {
  if (!fs.existsSync(dirpath)) fs.mkdirSync(dirpath);
}

module.exports.run = async function ({ api, event }) {
  var { threadID, messageID, senderID } = event;
  var choose = ["1", "2"];
  var text = "Reply l·ª±a ch·ªçn!\n1. Ch∆°i m·ªõi\n2. H∆∞·ªõng d·∫´n";
  if (fs.existsSync(dirpath + senderID + ".json")) { choose.push("3"); text += "\n3. Ch∆°i ti·∫øp" }
  return api.sendMessage(text, threadID, (error, info) => {
    global.client.handleReply.push({
      name: this.config.name,
      messageID: info.messageID,
      author: senderID,
      invalidC: choose,
      type: "procedure"
    })
  }, messageID)
}

module.exports.handleReply = async function ({ event, api, handleReply}) {
  var {sendMessage: send, unsendMessage: unsend} = api;
  var {threadID: tid, messageID: mid, senderID: sid, args} = event;
 try {
  if (sid !== handleReply.author) return;
  if (handleReply.type == "newgame") {
    var mode = parseInt(event.body);
    if (![1,2,3].includes(mode)) return send("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", tid, mid);
    unsend(handleReply.messageID);
    send("ƒêang t·∫°o...",tid,mid);
    var mine = 5 + 5*mode;
    var map = await createMap(mine);
    while (map[0][0].complete = 0) {map = await createMap(mine)}
    await loadAvt(sid);
    fs.writeFileSync(dirpath+`${sid}.json`, JSON.stringify(map, null, 2));
    return send({body:"1. ƒê√†o l√™n\n2. ƒê√°nh d·∫•u\n3. B·ªè ƒë√°nh d·∫•u\nVd: 1 E5 (ƒë√†o √¥ E5)", attachment: fs.createReadStream(await draw(map, sid))}, tid, (error, info) => {
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: sid,
        type: "play"
      })
    }, mid);
  }
  if (handleReply.type == "procedure") {
    if (!handleReply.invalidC.includes(event.body)) return send("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", tid, mid);
    if (event.body == "1") {
      unsend(handleReply.messageID);
      return send("Ch·ªçn ch·∫ø ƒë·ªô:\n1. D·ªÖ (10 m√¨n)\n2. Trung b√¨nh (15 m√¨n)\n3. Kh√≥ (20 m√¨n)", tid, (error, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: sid,
          type: "newgame"
        })
      }, mid)
    }
    if (event.body == "2") return send(texthelp, tid, mid);
    if (event.body == "3") {
      try {
      unsend(handleReply.messageID);
      await loadAvt(sid);
      var map = JSON.parse(fs.readFileSync(dirpath+sid+".json"));
      return send({body:"1. ƒê√†o l√™n\n2. ƒê√°nh d·∫•u\n3. B·ªè ƒë√°nh d·∫•u\nVd: 1 E5 (ƒë√†o √¥ E5)", attachment: fs.createReadStream(await draw(map, sid))}, tid, (error, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: sid,
          type: "play"
        })
      }, mid);
	  } catch (error) {console.log(error) ; return send(`‚ùå ƒê√£ x·∫£y ra l·ªói!\n Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch∆°i m·ªõi\n Chi ti·∫øt l·ªói:\n${error}`,tid,mid)}
    }
  }
  if (handleReply.type == "play") {
    var map = JSON.parse(fs.readFileSync(dirpath+sid+".json"));
    var choose = parseInt(args[0]);
    if (![1,2,3].includes(choose)) return send("‚ùå C√∫ ph√°p kh√¥ng h·ª£p l·ªá!",tid,mid);
    var string = "ABCDEFGHIK";
	async function openAll(board) {
      for (let i = 0; i < 10; i++) {
        for (let j = 0; j < 7; j++) {
          if (!board[i][j].opened) board[i][j].opened = true;
          if (board[i][j].markked) board[i][j].markked = false;
        }
      }
      return board;
    }
    if (choose == 1) { // ƒë√†o l√™n
      if (args.length == 1) return send("‚ùå Vui l√≤ng nh·∫≠p c√°c t·ªça ƒë·ªô c·∫ßn ƒë√†o!",tid,mid);
      unsend(handleReply.messageID);
      var success = [];
      for (let i = 1; i < args.length; i++ ) {
        var x = string.indexOf(args[i].slice(0,1).toUpperCase());
        if (x == -1) continue;
        var y = parseInt(args[i].slice(1,2));
        if (isNaN(y) || y<0 || y>6) continue;
        if (map[x][y].opened) continue;
        if (map[x][y].markked) continue;
        success.push(""+x+y);
        map[x][y].opened = true;
        map[0][0].complete += 1;
        if (map[x][y].isMine) {
          return send({body:"Tr√≤ ch∆°i k·∫øt th√∫c!\nB·∫°n ƒë√£ ƒë√†o tr√∫ng m√¨n üí£", attachment: fs.createReadStream(await draw(map, sid))}, tid, ()=> delData(sid), mid);
        }
      }
      if (map[0][0].complete == 70-map[0][0].mode) {
        map = await openAll(map);
          return send({body:"üèÜ B·∫°n ƒë√£ th·∫Øng!", attachment: fs.createReadStream(await draw(map, sid))}, tid, ()=> delData(sid), mid);
      }
      fs.writeFileSync(dirpath+`${sid}.json`, JSON.stringify(map, null, 2));
      return send({body:"ƒê√†o th√†nh c√¥ng: " + success.length + " √¥\n1. ƒê√†o l√™n\n2. ƒê√°nh d·∫•u\n3. B·ªè ƒë√°nh d·∫•u\nVd: 1 E5 (ƒë√†o √¥ E5)", attachment: fs.createReadStream(await draw(map, sid))}, tid, (error, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: sid,
          type: "play"
        })
      }, mid);
    }
    if (choose == 2) { //d√°nh d·∫•u
      if (args.length == 1) return send("‚ùå Vui l√≤ng nh·∫≠p c√°c t·ªça ƒë·ªô c·∫ßn ƒë√°nh d·∫•u!",tid,mid);
      unsend(handleReply.messageID);
      var success = [];
      for (let i = 1; i < args.length; i++ ) {
        var x = string.indexOf(args[i].slice(0,1).toUpperCase());
        if (x == -1) continue;
        var y = parseInt(args[i].slice(1,2));
        if (isNaN(y) || y<0 || y>6) continue;
        if (map[x][y].markked) continue;
        if (map[x][y].opened) continue;
        map[x][y].markked = true;
        map[0][0].flag += 1; success.push("" +x+y)
      }
      if (map[0][0].flag == map[0][0].mode) {
        var correct = 0;
        for (let i = 0; i < 10; i++) {
          for (let j = 0; j < 7; j++) {
            if (map[i][j].markked && map[i][j].isMine) correct++;
          }
        }
        if (correct == map[0][0].mode) {
          map = await openAll(map);
          return send({body:"üèÜ B·∫°n ƒë√£ th·∫Øng!", attachment: fs.createReadStream(await draw(map, sid))}, tid, ()=> delData(sid), mid);
        }
	  }
      fs.writeFileSync(dirpath+`${sid}.json`, JSON.stringify(map, null, 2));
      return send({body:"ƒê√°nh d·∫•u th√†nh c√¥ng: " + success.length + " √¥\n1. ƒê√†o l√™n\n2. ƒê√°nh d·∫•u\n3. B·ªè ƒë√°nh d·∫•u\nVd: 1 E5 (ƒë√†o √¥ E5)", attachment: fs.createReadStream(await draw(map, sid))}, tid, (error, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: sid,
          type: "play"
        })
      }, mid);
    }
    if (choose == 3) { // b·ªè ƒë√°nh d·∫•u
      if (args.length == 1) return send("‚ùå Vui l√≤ng nh·∫≠p c√°c t·ªça ƒë·ªô c·∫ßn ƒë√°nh d·∫•u!",tid,mid);
      unsend(handleReply.messageID);
      var success = [];
      for (let i = 1; i < args.length; i++ ) {
        var x = string.indexOf(args[i].slice(0,1).toUpperCase());
        if (x == -1) continue;
        var y = parseInt(args[i].slice(1,2));
        if (isNaN(y) || y<0 || y>6) continue;
        if (!map[x][y].markked) continue;
        map[x][y].markked = false;
        map[0][0].flag--; success.push(""+x+y);
      }
      if (map[0][0].flag == map[0][0].mode) {
        var correct = 0;
        for (let i = 0; i < 10; i++) {
          for (let j = 0; j < 7; j++) {
            if (map[i][j].markked && map[i][j].isMine) correct++;
          }
        }
        if (correct == map[0][0].mode) {
          map = await openAll(map);
          return send({body:"üèÜ B·∫°n ƒë√£ th·∫Øng!", attachment: fs.createReadStream(await draw(map, sid))}, tid, ()=> delData(sid), mid);
        }
	  }
      fs.writeFileSync(dirpath+`${sid}.json`, JSON.stringify(map, null, 2));
      return send({body:"B·ªè ƒë√°nh d·∫•u th√†nh c√¥ng: " + success.length + " √¥\n1. ƒê√†o l√™n\n2. ƒê√°nh d·∫•u\n3. B·ªè ƒë√°nh d·∫•u\nVd: 1 E5 (ƒë√†o √¥ E5)", attachment: fs.createReadStream(await draw(map, sid))}, tid, (error, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: sid,
          type: "play"
        })
      }, mid);
    }
  }
 } catch(error) {console.log(error); return send("ƒê√£ x·∫£y ra l·ªói!"+error, tid, mid)}
}
